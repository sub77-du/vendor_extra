From ee7d34d10c15a3b31ba41c0e9aca2690d1e1bf27 Mon Sep 17 00:00:00 2001
From: SpiritCroc <spiritcroc@gmail.com>
Date: Sat, 29 Aug 2015 11:43:21 +0200
Subject: [PATCH 1/2] [1/2] Slim Recent App Sidebar

One thing I was missing with SlimRecents was the possibility to launch your favorite apps from the recents screen. As SlimRecents covers only the half of the screen (more or less), there is enough space on the other edge to display an app sidebar, which I based on the ChameleonOS one.

Changes to the ChameleonOS sidebar include:
- No trigger areas, but show/hide with the SlimRecent screen
- Adapted look and animation to SlimRecent
- Longpress actions
- Slimer settings using ActionListViewSettings, also added possibility to configure sidebar size (roughly, as the size is adapted to the screen height in order to show full icons) and colors
- Currently no option to add folders to the sidebar, as this does not work with the current ActionListViewSettings without further work

Benzo Edit:
Squashed: Slim Recent App Sidebar make format look nicer

Change-Id: I1f3edce2ed12297a7a7cb976f2a2315f86492192
Signed-off-by: sub77 <sub77@ymail.com>

Conflicts:
	core/java/com/android/internal/util/slim/ActionHelper.java
	packages/SystemUI/res/values/rr_dimens.xml
	packages/SystemUI/src/com/android/systemui/slimrecent/RecentController.java
---
 core/java/android/provider/Settings.java           |  35 ++
 .../com/android/internal/util/du/ActionHelper.java |  34 ++
 .../SystemUI/res/layout/recent_app_sidebar.xml     |   8 +
 packages/SystemUI/res/values/du_dimens.xml         |   5 +
 .../android/systemui/slimrecent/AppSidebar.java    | 391 +++++++++++++++++++++
 .../systemui/slimrecent/RecentController.java      |  90 ++++-
 6 files changed, 552 insertions(+), 11 deletions(-)
 create mode 100644 packages/SystemUI/res/layout/recent_app_sidebar.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/slimrecent/AppSidebar.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 00f4cab..031347a 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4737,6 +4737,41 @@ public final class Settings {
         public static final String NAVBAR_BUTTON_COLOR = "navbar_button_color";
 
         /**
+         * Recent app sidebar content
+         *
+         * @hide
+         */
+        public static final String RECENT_APP_SIDEBAR_CONTENT = "recent_app_sidebar_content";
+
+        /**
+         * Disable text labels for the slim recent app sidebar items
+         *
+         * @hide
+         */
+        public static final String RECENT_APP_SIDEBAR_DISABLE_LABELS = "recent_app_sidebar_disable_labels";
+
+        /**
+         * Slim recent app sidebar background color
+         *
+         * @hide
+         */
+        public static final String RECENT_APP_SIDEBAR_BG_COLOR = "recent_app_sidebar_bg_color";
+
+        /**
+         * Slim recent app sidebar text color
+         *
+         * @hide
+         */
+        public static final String RECENT_APP_SIDEBAR_TEXT_COLOR = "recent_app_sidebar_text_color";
+
+        /**
+         * Size of recent app sidebar in percent (default = 100).
+         *
+         * @hide
+         */
+        public static final String RECENT_APP_SIDEBAR_SCALE_FACTOR = "recent_app_sidebar_scale_factor";
+
+        /**
          * Settings to backup. This is here so that it's in the same place as the settings
          * keys and easy to update.
          *
diff --git a/core/java/com/android/internal/util/du/ActionHelper.java b/core/java/com/android/internal/util/du/ActionHelper.java
index b463962..49a750e 100644
--- a/core/java/com/android/internal/util/du/ActionHelper.java
+++ b/core/java/com/android/internal/util/du/ActionHelper.java
@@ -64,6 +64,40 @@ public class ActionHelper {
                     Settings.System.LOCKSCREEN_SHORTCUTS, config);
     }
 
+    public static ArrayList<ActionConfig> getRecentAppSidebarConfig(Context context) {
+        return (ConfigSplitHelper.getActionConfigValues(context,
+                getRecentAppSidebarProvider(context), null, null, false));
+    }
+
+    public static ArrayList<ActionConfig> getRecentAppSidebarConfigWithDescription(
+            Context context, String values, String entries) {
+        return (ConfigSplitHelper.getActionConfigValues(context,
+                getRecentAppSidebarProvider(context), values, entries, false));
+    }
+
+    private static String getRecentAppSidebarProvider(Context context) {
+        String config = Settings.System.getStringForUser(
+                context.getContentResolver(),
+                Settings.System.RECENT_APP_SIDEBAR_CONTENT,
+                UserHandle.USER_CURRENT);
+        if (config == null) {
+            config = "";
+        }
+        return config;
+    }
+
+    public static void setRecentAppSidebarConfig(
+            Context context, ArrayList<ActionConfig> actionConfig, boolean reset) {
+        String config;
+        if (reset) {
+            config = "";
+        } else {
+            config = ConfigSplitHelper.setActionConfig(actionConfig, false);
+        }
+        Settings.System.putString(context.getContentResolver(),
+                Settings.System.RECENT_APP_SIDEBAR_CONTENT, config);
+    }
+
     // General methods to retrieve the correct icon for the respective action.
     public static Drawable getActionIconImage(Context context,
             String clickAction, String customIcon) {
diff --git a/packages/SystemUI/res/layout/recent_app_sidebar.xml b/packages/SystemUI/res/layout/recent_app_sidebar.xml
new file mode 100644
index 0000000..70431d0
--- /dev/null
+++ b/packages/SystemUI/res/layout/recent_app_sidebar.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<com.android.systemui.slimrecent.AppSidebar
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/app_sidebar"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent" />
+
diff --git a/packages/SystemUI/res/values/du_dimens.xml b/packages/SystemUI/res/values/du_dimens.xml
index 1d700ac..9940300 100644
--- a/packages/SystemUI/res/values/du_dimens.xml
+++ b/packages/SystemUI/res/values/du_dimens.xml
@@ -89,4 +89,9 @@
     <dimen name="detail_radio_group_padding_left">16dp</dimen>
     <dimen name="detail_radio_group_padding">8dp</dimen>
 
+    <!-- Slim recent app sidebar -->
+    <dimen name="recent_app_sidebar_item_size">60dp</dimen>
+    <dimen name="recent_app_sidebar_item_padding">2dp</dimen>
+    <dimen name="recent_app_sidebar_item_title_text_size">11sp</dimen>
+
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/slimrecent/AppSidebar.java b/packages/SystemUI/src/com/android/systemui/slimrecent/AppSidebar.java
new file mode 100644
index 0000000..f591792
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/slimrecent/AppSidebar.java
@@ -0,0 +1,391 @@
+/*
+ * Copyright (C) 2013 The ChameleonOS Project
+ * Copyright (C) 2015 SlimRoms Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.slimrecent;
+
+import static android.view.KeyEvent.ACTION_DOWN;
+import static android.view.KeyEvent.KEYCODE_BACK;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.Resources;
+import android.database.ContentObserver;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.text.TextUtils.TruncateAt;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.KeyEvent;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.*;
+
+import com.android.internal.util.slim.Action;
+import com.android.internal.util.slim.ActionConfig;
+import com.android.internal.util.slim.ActionConstants;
+import com.android.internal.util.slim.ActionHelper;
+import com.android.systemui.R;
+
+import java.util.ArrayList;
+
+public class AppSidebar extends FrameLayout {
+    private static final String TAG = "SlimRecentAppSidebar";
+
+    private static final LinearLayout.LayoutParams SCROLLVIEW_LAYOUT_PARAMS =
+            new LinearLayout.LayoutParams(
+                    ViewGroup.LayoutParams.MATCH_PARENT,
+                    ViewGroup.LayoutParams.MATCH_PARENT,
+                    1.0f
+            );
+
+    private static LinearLayout.LayoutParams ITEM_LAYOUT_PARAMS =
+            new LinearLayout.LayoutParams(
+                    ViewGroup.LayoutParams.WRAP_CONTENT,
+                    ViewGroup.LayoutParams.WRAP_CONTENT,
+                    1.0f
+            );
+
+    public static float DEFAULT_SCALE_FACTOR = 1.0f;
+
+    private LinearLayout mAppContainer;
+    private SnappingScrollView mScrollView;
+    private Rect mScaledIconBounds;
+    private int mIconSize;
+    private int mScaledIconSize;
+    private int mItemTextSize;
+    private int mScaledItemTextSize;
+    private int mBackgroundColor;
+    private int mLabelColor;
+    private boolean mHideTextLabels = false;
+
+    private float mScaleFactor = DEFAULT_SCALE_FACTOR;
+
+    private Context mContext;
+    private SettingsObserver mSettingsObserver;
+
+    private RecentController mSlimRecent;
+
+    public AppSidebar(Context context) {
+        this(context, null);
+    }
+
+    public AppSidebar(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public AppSidebar(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        mContext = context;
+        Resources resources = context.getResources();
+        mItemTextSize = resources
+                .getDimensionPixelSize(R.dimen.recent_app_sidebar_item_title_text_size);
+        mIconSize = resources
+                .getDimensionPixelSize(R.dimen.recent_app_sidebar_item_size) - mItemTextSize;
+        setScaledSizes();
+    }
+
+    private void setScaledSizes() {
+        mScaledItemTextSize = Math.round(mItemTextSize * mScaleFactor);
+        mScaledIconSize = Math.round(mIconSize * mScaleFactor);
+        mScaledIconBounds = new Rect(0, 0, mScaledIconSize, mScaledIconSize);
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        setupAppContainer();
+        mSettingsObserver = new SettingsObserver(new Handler());
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        mSettingsObserver.observe();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        mSettingsObserver.unobserve();
+    }
+
+    public void setSlimRecent(RecentController slimRecent){
+        mSlimRecent = slimRecent;
+    }
+
+    private void setupAppContainer() {
+        post(new Runnable() {
+            public void run() {
+                setupSidebarContent();
+            }
+        });
+    }
+
+
+    private int getBackgroundColor(){
+        return mBackgroundColor == 0x00ffffff ?
+                mContext.getResources().getColor(R.color.recent_background) : mBackgroundColor;
+    }
+    private int getLabelColor(){
+        return mLabelColor == 0x00ffffff ?
+                mContext.getResources().getColor(R.color.recents_task_bar_light_text_color) :
+                mLabelColor;
+    }
+
+    @Override
+    public boolean dispatchKeyEventPreIme(KeyEvent event) {
+        if (event.getKeyCode() == KEYCODE_BACK && event.getAction() == ACTION_DOWN &&
+                mSlimRecent != null)
+            mSlimRecent.onExit();
+        return super.dispatchKeyEventPreIme(event);
+    }
+
+    private OnClickListener mItemClickedListener = new OnClickListener() {
+        @Override
+        public void onClick(View view) {
+            Action.processAction(mContext, ((ActionConfig)view.getTag()).getClickAction(), false);
+            hideSlimRecent();
+        }
+    };
+
+    private OnLongClickListener mItemLongClickedListener = new OnLongClickListener() {
+        @Override
+        public boolean onLongClick(View view) {
+            String action = ((ActionConfig)view.getTag()).getLongpressAction();
+            if (!ActionConstants.ACTION_NULL.equals(action)) {
+                Action.processAction(mContext, action, false);
+                hideSlimRecent();
+                return true;
+            }
+            return false;
+        }
+    };
+
+    class SnappingScrollView extends ScrollView {
+
+        private boolean mSnapTrigger = false;
+
+        public SnappingScrollView(Context context) {
+            super(context);
+        }
+
+        Runnable mSnapRunnable = new Runnable(){
+            @Override
+            public void run() {
+                int mSelectedItem = ((getScrollY() + (ITEM_LAYOUT_PARAMS.height / 2)) /
+                        ITEM_LAYOUT_PARAMS.height);
+                int scrollTo = mSelectedItem * ITEM_LAYOUT_PARAMS.height;
+                smoothScrollTo(0, scrollTo);
+                mSnapTrigger = false;
+            }
+        };
+
+        @Override
+        protected void onScrollChanged(int l, int t, int oldl, int oldt) {
+            super.onScrollChanged(l, t, oldl, oldt);
+            if (Math.abs(oldt - t) <= 1 && mSnapTrigger) {
+                removeCallbacks(mSnapRunnable);
+                postDelayed(mSnapRunnable, 100);
+            }
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent ev) {
+            int action = ev.getAction();
+            if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
+                mSnapTrigger = true;
+            } else if (action == MotionEvent.ACTION_DOWN) {
+                mSnapTrigger = false;
+            }
+            return super.onTouchEvent(ev);
+        }
+    }
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.RECENT_APP_SIDEBAR_DISABLE_LABELS), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.RECENT_APP_SIDEBAR_BG_COLOR), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.RECENT_APP_SIDEBAR_TEXT_COLOR), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.RECENT_APP_SIDEBAR_SCALE_FACTOR), false, this);
+            update();
+        }
+
+        void unobserve() {
+            mContext.getContentResolver().unregisterContentObserver(this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            update();
+        }
+
+        public void update() {
+            ContentResolver resolver = mContext.getContentResolver();
+
+            boolean requireNewSetup = false;
+
+            boolean hideLabels = Settings.System.getIntForUser(
+                    resolver, Settings.System.RECENT_APP_SIDEBAR_DISABLE_LABELS, 0,
+                    UserHandle.USER_CURRENT) == 1;
+
+            int labelColor = Settings.System.getIntForUser(resolver,
+                    Settings.System.RECENT_APP_SIDEBAR_TEXT_COLOR, 0x00ffffff,
+                    UserHandle.USER_CURRENT);
+
+            if (hideLabels != mHideTextLabels || labelColor != mLabelColor) {
+                mHideTextLabels = hideLabels;
+                mLabelColor = labelColor;
+                if (mScrollView != null) {
+                    requireNewSetup = true;
+                }
+            }
+
+            int backgroundColor = Settings.System.getIntForUser(resolver,
+                    Settings.System.RECENT_APP_SIDEBAR_BG_COLOR, 0x00ffffff,
+                    UserHandle.USER_CURRENT);
+
+            if (mBackgroundColor != backgroundColor) {
+                mBackgroundColor = backgroundColor;
+                setBackgroundColor(getBackgroundColor());
+            }
+
+            float scaleFactor = Settings.System.getIntForUser(
+                    resolver, Settings.System.RECENT_APP_SIDEBAR_SCALE_FACTOR, 100,
+                    UserHandle.USER_CURRENT) / 100.0f;
+            if (scaleFactor != mScaleFactor) {
+                mScaleFactor = scaleFactor;
+                setScaledSizes();
+                requireNewSetup = true;
+            }
+            if (requireNewSetup) {
+                setupAppContainer();
+            }
+        }
+    }
+
+    private void setupSidebarContent(){
+        // Load content
+        ArrayList<ActionConfig> contentConfig = ActionHelper.getRecentAppSidebarConfig(mContext);
+        ArrayList<View> mContainerItems = new ArrayList<View>();
+
+        for (ActionConfig config: contentConfig){
+            mContainerItems.add(createAppItem(config));
+        }
+
+        // Layout items
+        Rect r = new Rect();
+        getWindowVisibleDisplayFrame(r);
+        int windowHeight = r.bottom - r.top;;
+        int statusBarHeight = r.top;
+        if (mScrollView != null)
+            removeView(mScrollView);
+
+        // create a LinearLayout to hold our items
+        if (mAppContainer == null) {
+            mAppContainer = new LinearLayout(mContext);
+            mAppContainer.setOrientation(LinearLayout.VERTICAL);
+            mAppContainer.setGravity(Gravity.CENTER);
+        }
+        mAppContainer.removeAllViews();
+
+        // set the layout height based on the item height we would like and the
+        // number of items that would fit at on screen at once given the height
+        // of the app sidebar
+        int padding = mContext.getResources()
+                .getDimensionPixelSize(R.dimen.recent_app_sidebar_item_padding);
+        int desiredItemSize = mScaledIconSize + padding * 2;
+        if (!mHideTextLabels) {
+            // add size twice to make sure that the text won't get cut
+            // (e.g. "y" being displayed as "v")
+            desiredItemSize += mScaledItemTextSize * 2;
+        }
+        int numItems = (int)Math.floor(windowHeight / desiredItemSize);
+        ITEM_LAYOUT_PARAMS.height = windowHeight / numItems;
+        ITEM_LAYOUT_PARAMS.width = desiredItemSize;
+        LinearLayout.LayoutParams firstItemLayoutParams = new LinearLayout.LayoutParams(
+                ITEM_LAYOUT_PARAMS.width, ITEM_LAYOUT_PARAMS.height);
+        firstItemLayoutParams.topMargin += statusBarHeight;
+
+        boolean firstIcon = true;
+        for (View icon : mContainerItems) {
+            icon.setOnClickListener(mItemClickedListener);
+            icon.setOnLongClickListener(mItemLongClickedListener);
+            if (mHideTextLabels) {
+                ((TextView)icon).setTextSize(0);
+            }
+            icon.setClickable(true);
+            icon.setPadding(0, padding, 0, padding);
+            if (firstIcon) {
+                // First icon should not hide behind the status bar
+                mAppContainer.addView(icon, firstItemLayoutParams);
+                firstIcon = false;
+            } else {
+                mAppContainer.addView(icon, ITEM_LAYOUT_PARAMS);
+            }
+        }
+
+        // we need our horizontal scroll view to wrap the linear layout
+        if (mScrollView == null) {
+            mScrollView = new SnappingScrollView(mContext);
+            // make the fading edge the size of a button (makes it more noticible that we can scroll
+            mScrollView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
+            mScrollView.setOverScrollMode(View.OVER_SCROLL_NEVER);
+        }
+        mScrollView.removeAllViews();
+        mScrollView.addView(mAppContainer, SCROLLVIEW_LAYOUT_PARAMS);
+        addView(mScrollView, SCROLLVIEW_LAYOUT_PARAMS);
+        mAppContainer.setFocusable(true);
+    }
+
+    private TextView createAppItem(ActionConfig config) {
+        TextView tv = new TextView(mContext);
+        Drawable icon = ActionHelper.getActionIconImage(mContext, config.getClickAction(),
+                config.getIcon());
+        if (icon != null) {
+            icon.setBounds(mScaledIconBounds);
+            tv.setCompoundDrawables(null, icon, null, null);
+        }
+        tv.setTag(config);
+        tv.setText(config.getClickActionDescription());
+        tv.setSingleLine(true);
+        tv.setEllipsize(TruncateAt.END);
+        tv.setGravity(Gravity.CENTER);
+        tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, mScaledItemTextSize);
+        tv.setTextColor(getLabelColor());
+
+        return tv;
+    }
+
+    private void hideSlimRecent(){
+        if (mSlimRecent != null)
+            mSlimRecent.hideRecents(false);
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/slimrecent/RecentController.java b/packages/SystemUI/src/com/android/systemui/slimrecent/RecentController.java
index 0cd833d..6b928c3 100644
--- a/packages/SystemUI/src/com/android/systemui/slimrecent/RecentController.java
+++ b/packages/SystemUI/src/com/android/systemui/slimrecent/RecentController.java
@@ -108,12 +108,18 @@ public class RecentController implements RecentPanelView.OnExitListener,
     private int mUserGravity;
     private int mPanelColor;
     private int mImmersiveRecents;
+    private int mVisibility;
 
     private float mScaleFactor = DEFAULT_SCALE_FACTOR;
 
     // Main panel view.
     private RecentPanelView mRecentPanelView;
 
+    // App Sidebar.
+    private AppSidebar mAppSidebar;
+    private boolean mAppSidebarEnabled;
+    private float mAppSidebarScaleFactor = AppSidebar.DEFAULT_SCALE_FACTOR;
+
     private Handler mHandler = new Handler();
 
     private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
@@ -249,11 +255,7 @@ public class RecentController implements RecentPanelView.OnExitListener,
     private void setGravityAndImageResources() {
         // Calculate and set gravitiy.
         if (mLayoutDirection == View.LAYOUT_DIRECTION_RTL) {
-            if (mUserGravity == Gravity.LEFT) {
-                mMainGravity = Gravity.RIGHT;
-            } else {
-                mMainGravity = Gravity.LEFT;
-            }
+            mMainGravity = reverseGravity(mUserGravity);
         } else {
             mMainGravity = mUserGravity;
         }
@@ -374,9 +376,21 @@ public class RecentController implements RecentPanelView.OnExitListener,
      *
      * @return LayoutParams
      */
-    private WindowManager.LayoutParams generateLayoutParameter() {
-        final int width = (int) (mContext.getResources()
-                .getDimensionPixelSize(R.dimen.recent_width) * mScaleFactor);
+    private WindowManager.LayoutParams generateLayoutParameter(){
+        return generateLayoutParameter(false);
+    }
+    private WindowManager.LayoutParams generateLayoutParameter(boolean forAppSidebar) {
+        final int width;
+        if (forAppSidebar){
+            int appSidebarPadding = mContext.getResources()
+                    .getDimensionPixelSize(R.dimen.recent_app_sidebar_item_padding);
+            width = (int) (mContext.getResources()
+                    .getDimensionPixelSize(R.dimen.recent_app_sidebar_item_size)
+                    * mAppSidebarScaleFactor + appSidebarPadding * 2f);
+        } else {
+            width = (int) (mContext.getResources().getDimensionPixelSize(R.dimen.recent_width)
+                    * mScaleFactor);
+        }
         final WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                 width,
                 WindowManager.LayoutParams.MATCH_PARENT,
@@ -394,17 +408,23 @@ public class RecentController implements RecentPanelView.OnExitListener,
         }
 
         // Set gravitiy.
-        params.gravity = Gravity.CENTER_VERTICAL | mMainGravity;
+        int gravity;
+        if (forAppSidebar){
+            gravity = reverseGravity(mMainGravity);
+        } else {
+            gravity = mMainGravity;
+        }
+        params.gravity = Gravity.CENTER_VERTICAL | gravity;
 
         // Set animation for our recent window.
-        if (mMainGravity == Gravity.LEFT) {
+        if ((mMainGravity == Gravity.LEFT) != forAppSidebar) {
             params.windowAnimations = com.android.internal.R.style.Animation_RecentScreen_Left;
         } else {
             params.windowAnimations = com.android.internal.R.style.Animation_RecentScreen;
         }
 
         // This title is for debugging only. See: dumpsys window
-        params.setTitle("RecentControlPanel");
+        params.setTitle(forAppSidebar ? "RecentAppSidebar" : "RecentControlPanel");
         return params;
     }
 
@@ -444,6 +464,12 @@ public class RecentController implements RecentPanelView.OnExitListener,
                     | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
             break;
         }
+
+        mParentView.setSystemUiVisibility(newVis);
+        mVisibility = newVis;
+        if (mAppSidebar != null){
+            mAppSidebar.setSystemUiVisibility(newVis);
+        }
     }
 
     // Returns if panel is currently showing.
@@ -465,6 +491,7 @@ public class RecentController implements RecentPanelView.OnExitListener,
                 mAnimationState = ANIMATION_STATE_NONE;
                 mHandler.removeCallbacks(mRecentRunnable);
                 mWindowManager.removeViewImmediate(mParentView);
+                removeSidebarViewImmediate();
                 return true;
             } else if (mAnimationState != ANIMATION_STATE_OUT) {
                 if (DEBUG) Log.d(TAG, "out animation starting");
@@ -473,6 +500,7 @@ public class RecentController implements RecentPanelView.OnExitListener,
                 mHandler.postDelayed(mRecentRunnable, mContext.getResources().getInteger(
                         com.android.internal.R.integer.config_recentDefaultDur));
                 mWindowManager.removeView(mParentView);
+                removeSidebarView();
                 return true;
             }
         }
@@ -488,6 +516,7 @@ public class RecentController implements RecentPanelView.OnExitListener,
         mHandler.removeCallbacks(mRecentRunnable);
         CacheController.getInstance(mContext).setRecentScreenShowing(true);
         mWindowManager.addView(mParentView, generateLayoutParameter());
+        addSidebarView();
     }
 
     private static void sendCloseSystemWindows() {
@@ -564,6 +593,12 @@ public class RecentController implements RecentPanelView.OnExitListener,
             resolver.registerContentObserver(Settings.System.getUriFor(
                     Settings.System.IMMERSIVE_RECENTS),
                     false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.RECENT_APP_SIDEBAR_CONTENT),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.RECENT_APP_SIDEBAR_SCALE_FACTOR),
+                    false, this, UserHandle.USER_ALL);
             update();
         }
 
@@ -627,6 +662,14 @@ public class RecentController implements RecentPanelView.OnExitListener,
             mImmersiveRecents = Settings.System.getIntForUser(
                     resolver, Settings.System.IMMERSIVE_RECENTS, 0,
                     UserHandle.USER_CURRENT);
+
+            // App sidebar settings
+            String appSidebarContent = Settings.System.getStringForUser(
+                    resolver, Settings.System.RECENT_APP_SIDEBAR_CONTENT, UserHandle.USER_CURRENT);
+            mAppSidebarEnabled = appSidebarContent != null && !appSidebarContent.equals("");
+            mAppSidebarScaleFactor = Settings.System.getIntForUser(
+                    resolver, Settings.System.RECENT_APP_SIDEBAR_SCALE_FACTOR, 100,
+                    UserHandle.USER_CURRENT) / 100.0f;
         }
     }
 
@@ -791,4 +834,29 @@ public class RecentController implements RecentPanelView.OnExitListener,
         }
    }
 
+    private int reverseGravity(int gravity){
+        return gravity == Gravity.LEFT ? Gravity.RIGHT : Gravity.LEFT;
+    }
+
+    // Methods for app sidebar:
+    private void addSidebarView() {
+        if (mAppSidebarEnabled) {
+            mAppSidebar = (AppSidebar) View.inflate(mContext, R.layout.recent_app_sidebar, null);
+            mAppSidebar.setSlimRecent(this);
+            mAppSidebar.setSystemUiVisibility(mVisibility);
+            mWindowManager.addView(mAppSidebar, generateLayoutParameter(true));
+        }
+    }
+    private void removeSidebarView() {
+        if (mAppSidebar != null) {
+            mWindowManager.removeView(mAppSidebar);
+            mAppSidebar = null;
+        }
+    }
+    private void removeSidebarViewImmediate() {
+        if (mAppSidebar != null) {
+            mWindowManager.removeViewImmediate(mAppSidebar);
+            mAppSidebar = null;
+        }
+    }
 }
-- 
1.9.1

