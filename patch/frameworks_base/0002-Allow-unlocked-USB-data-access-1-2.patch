From 9f6d0140bce50f29ffb4580d97a4862117a96d5a Mon Sep 17 00:00:00 2001
From: George G <kreach3r@users.noreply.github.com>
Date: Mon, 21 Mar 2016 14:57:04 +0200
Subject: [PATCH 2/3] Allow unlocked USB data access (1/2)

by @KreAch3R

This bypasses the marshmallow "regression" of blocking and resetting USB data access
after disconnecting. It also allows saving the default configuration and it survives a reboot.
Originally, this "feature" was added by Google for security reasons
so it should be advised to use the below setting under caution.

Signed-off-by: Corey Edwards <ensabahnur16@gmail.com>
Signed-off-by: sub77 <sub77@ymail.com>

Conflicts:
	services/usb/java/com/android/server/usb/UsbDeviceManager.java

Change-Id: I35a0de02e7e25d88d83041bcfac33306fe787590
Signed-off-by: sub77 <sub77@ymail.com>
---
 core/java/android/provider/Settings.java           |  5 ++++
 .../com/android/server/usb/UsbDeviceManager.java   | 35 ++++++++++++++++++----
 2 files changed, 35 insertions(+), 5 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 3651fed..8569678 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4695,6 +4695,11 @@ public final class Settings {
          */
         public static final String INCREASING_RING_RAMP_UP_TIME = "increasing_ring_ramp_up_time";
 
+       /**
+        * USB Data automatic unlock
+        */
+       public static final String USB_DATA_AUTO_UNLOCK = "usb_data_auto_unlock";
+
         /**
          * Settings to backup. This is here so that it's in the same place as the settings
          * keys and easy to update.
diff --git a/services/usb/java/com/android/server/usb/UsbDeviceManager.java b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
index ec8a11f..8ec2de2 100644
--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
@@ -71,7 +71,7 @@ public class UsbDeviceManager {
     private static final boolean DEBUG = false;
 
     /**
-     * The persistent property which stores whether adb is enabled or not.
+     * The persistent property which stores whether adb is enabled or not, and the user default usb state.
      * May also contain vendor-specific default functions for testing purposes.
      */
     private static final String USB_PERSISTENT_CONFIG_PROPERTY = "persist.sys.usb.config";
@@ -161,6 +161,19 @@ public class UsbDeviceManager {
         }
     }
 
+    private class UsbDataSettingsObserver extends ContentObserver {
+        public UsbDataSettingsObserver() {
+            super(null);
+        }
+        @Override
+        public void onChange(boolean selfChange) {
+            boolean unlocked = (Settings.System.getInt(mContentResolver,
+                    Settings.System.USB_DATA_AUTO_UNLOCK, 0) > 0);
+            mHandler.sendMessage(MSG_SET_USB_DATA_UNLOCKED, unlocked);
+            Slog.d(TAG, "AUTO_UNLOCK IS CHANGED.");
+        }
+    }
+
     /*
      * Listens for uevent messages from the kernel to monitor the USB state
      */
@@ -318,7 +331,7 @@ public class UsbDeviceManager {
         private boolean mConnected;
         private boolean mHostConnected;
         private boolean mConfigured;
-        private boolean mUsbDataUnlocked;
+        private boolean mUsbDataUnlocked = isUsbDataSetToUnlocked();
         private String mCurrentFunctions;
         private boolean mCurrentFunctionsApplied;
         private UsbAccessory mCurrentAccessory;
@@ -344,7 +357,7 @@ public class UsbDeviceManager {
                 String state = FileUtils.readTextFile(new File(STATE_PATH), 0, null).trim();
                 updateState(state);
 
-                // register observer to listen for settings changes
+                // register observer to listen for adb settings changes
                 mContentResolver.registerContentObserver(
                         Settings.Global.getUriFor(Settings.Global.ADB_ENABLED),
                                 false, new AdbSettingsObserver());
@@ -363,6 +376,11 @@ public class UsbDeviceManager {
                         Settings.Secure.getUriFor(Settings.Secure.ADB_NOTIFY),
                                 false, adbNotificationObserver);
 
+                // register observer to listen for usb data settings changes
+                mContentResolver.registerContentObserver(
+                        Settings.System.getUriFor(Settings.System.USB_DATA_AUTO_UNLOCK),
+                                false, new UsbDataSettingsObserver());
+
                 // Watch for USB configuration changes
                 mUEventObserver.startObserving(USB_STATE_MATCH);
                 mUEventObserver.startObserving(ACCESSORY_START_MATCH);
@@ -434,6 +452,8 @@ public class UsbDeviceManager {
             // we always set it due to b/23631400, where adbd was getting killed
             // and not restarted due to property timeouts on some devices
             SystemProperties.set(USB_CONFIG_PROPERTY, config);
+            // set the persistent value too (to survive reboots)
+            SystemProperties.set(USB_PERSISTENT_CONFIG_PROPERTY, config);
             return waitForState(config);
         }
 
@@ -670,7 +690,7 @@ public class UsbDeviceManager {
                 case MSG_UPDATE_STATE:
                     mConnected = (msg.arg1 == 1);
                     mConfigured = (msg.arg2 == 1);
-                    if (!mConnected) {
+                    if (!mConnected && !isUsbDataSetToUnlocked()) {
                         // When a disconnect occurs, relock access to sensitive user data
                         mUsbDataUnlocked = false;
                     }
@@ -679,7 +699,7 @@ public class UsbDeviceManager {
                     if (UsbManager.containsFunction(mCurrentFunctions,
                             UsbManager.USB_FUNCTION_ACCESSORY)) {
                         updateCurrentAccessory();
-                    } else if (!mConnected) {
+                    } else if (!mConnected && !isUsbDataSetToUnlocked()) {
                         // restore defaults when USB is disconnected
                         setEnabledFunctions(null, false);
                     }
@@ -920,6 +940,11 @@ public class UsbDeviceManager {
         return UsbManager.containsFunction(SystemProperties.get(USB_CONFIG_PROPERTY), function);
     }
 
+    public boolean isUsbDataSetToUnlocked() {
+        return (Settings.System.getInt(mContentResolver,
+                    Settings.System.USB_DATA_AUTO_UNLOCK, 0) > 0);
+    }
+
     public void setCurrentFunctions(String functions) {
         if (DEBUG) Slog.d(TAG, "setCurrentFunctions(" + functions + ")");
         mHandler.sendMessage(MSG_SET_CURRENT_FUNCTIONS, functions);
-- 
1.9.1

