From 214de0a54b67a7ad15155aafa055c0576c5c4117 Mon Sep 17 00:00:00 2001
From: sub77 <sub77@ymail.com>
Date: Tue, 31 May 2016 16:49:19 -0500
Subject: [PATCH 33/49] Allow unlocked USB data access (2/2)

by @KreAch3R

This bypasses the marshmallow "regression" of blocking and resetting USB data access
after disconnecting. It also allows saving the default configuration and it survives a reboot.
Originally, this "feature" was added by Google for security reasons
so it should be advised to use the below setting under caution.

Also:
 * Adds an "Advanced" section under Storage and USB
 * Moves Usb Configuration from Development settings
 * Secured lockscreen disables the option

Change-Id: I37caa83fa891c4d28f2623ab2f227827a8f55e3a
Signed-off-by: Corey Edwards <ensabahnur16@gmail.com>
---
 AndroidManifest.xml                                |  17 +++
 res/values/du_strings.xml                          |   9 ++
 res/xml/development_prefs.xml                      |   7 --
 res/xml/storage_advanced_settings.xml              |  41 +++++++
 src/com/android/settings/DevelopmentSettings.java  |  58 ---------
 src/com/android/settings/Settings.java             |   1 +
 src/com/android/settings/SettingsActivity.java     |   2 +
 src/com/android/settings/deviceinfo/AdvancedStorageSettings.java        | 135 +++++++++++++++++++++
 src/com/android/settings/deviceinfo/PrivateVolumeSettings.java |  11 +-
 9 files changed, 215 insertions(+), 66 deletions(-)
 create mode 100644 res/xml/storage_advanced_settings.xml
 create mode 100644 src/com/android/settings/deviceinfo/AdvancedStorageSettings.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index ac7ee6c..01e3de3 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1576,6 +1576,23 @@
                 android:value="true" />
         </activity>
 
+        <activity android:name="Settings$AdvancedStorageSettingsActivity"
+                android:taskAffinity="com.android.settings"
+                android:label="@string/storage_advanced_titlebar"
+                android:parentActivityName="Settings$StorageSettingsActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.VOICE_LAUNCH" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.deviceinfo.AdvancedStorageSettings" />
+            <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
+                android:resource="@id/storage_settings" />
+            <meta-data android:name="com.android.settings.PRIMARY_PROFILE_CONTROLLED"
+                android:value="true" />
+        </activity>
+
         <activity android:name="Settings$PrivateVolumeSettingsActivity"
                 android:label="@string/storage_settings_title"
                 android:taskAffinity="com.android.settings"
diff --git a/res/values/du_strings.xml b/res/values/du_strings.xml
index 7f45a1e..b2dcbbe 100644
--- a/res/values/du_strings.xml
+++ b/res/values/du_strings.xml
@@ -378,4 +378,13 @@
     <string name="fourhalf_second">4.5 s</string>
     <string name="five_second">5 s</string>
 
+   <!-- Advanced storage settings -->
+   <string name="storage_advanced_titlebar">Advanced Storage</string>
+   <string name="storage_menu_advanced">Advanced</string>
+
+   <!-- USB data automatic unlock -->
+   <string name="usb_data_auto_unlock_title">Unlock USB data</string>
+   <string name="usb_data_auto_unlock_summary">Allow unlocked data access to your phone\'s storage through USB (MTP, PTP)</string>
+   <string name="usb_data_auto_unlock_warning_summary">Your device will establish unprotected connections, everytime you connect it to a PC. Secured lockscreens disable this option automatically.\n\nThis is still an experimental feature, use with caution.</string>
+
 </resources>
diff --git a/res/xml/development_prefs.xml b/res/xml/development_prefs.xml
index 57e9b1c..f712ef6 100644
--- a/res/xml/development_prefs.xml
+++ b/res/xml/development_prefs.xml
@@ -168,13 +168,6 @@
             android:title="@string/mobile_data_always_on"
             android:summary="@string/mobile_data_always_on_summary"/>
 
-        <ListPreference
-            android:key="select_usb_configuration"
-            android:title="@string/select_usb_configuration_title"
-            android:dialogTitle="@string/select_usb_configuration_dialog_title"
-            android:entries="@array/usb_configuration_titles"
-            android:entryValues="@array/usb_configuration_values" />
-
     </PreferenceCategory>
 
     <PreferenceCategory android:key="debug_input_category"
diff --git a/res/xml/storage_advanced_settings.xml b/res/xml/storage_advanced_settings.xml
new file mode 100644
index 0000000..f717ad7
--- /dev/null
+++ b/res/xml/storage_advanced_settings.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<!-- Copyright (C) 2016 Krexus
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        android:title="@string/storage_advanced_titlebar">
+
+    <com.dirtyunicorns.dutweaks.preference.SystemSettingSwitchPreference
+            android:key="usb_data_auto_unlock"
+            android:title="@string/usb_data_auto_unlock_title"
+            android:summary="@string/usb_data_auto_unlock_summary"
+            android:defaultValue="false" />
+
+    <ListPreference
+            android:key="select_usb_configuration"
+            android:title="@string/select_usb_configuration_title"
+            android:dialogTitle="@string/select_usb_configuration_dialog_title"
+            android:entries="@array/usb_configuration_titles"
+            android:entryValues="@array/usb_configuration_values"
+            android:dependency="usb_data_auto_unlock" />
+
+    <Preference
+            android:key="usb_data_auto_unlock_warning"
+            android:summary="@string/usb_data_auto_unlock_warning_summary"
+            android:persistent="false"
+            android:selectable="false" />
+
+</PreferenceScreen>
diff --git a/src/com/android/settings/DevelopmentSettings.java b/src/com/android/settings/DevelopmentSettings.java
index 5192c4f..2bc8c03 100644
--- a/src/com/android/settings/DevelopmentSettings.java
+++ b/src/com/android/settings/DevelopmentSettings.java
@@ -26,12 +26,10 @@ import android.app.Dialog;
 import android.app.admin.DevicePolicyManager;
 import android.app.backup.IBackupManager;
 import android.bluetooth.BluetoothAdapter;
-import android.content.BroadcastReceiver;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
@@ -41,7 +39,6 @@ import android.net.NetworkUtils;
 import android.net.wifi.IWifiManager;
 import android.net.wifi.WifiInfo;
 import android.hardware.usb.IUsbManager;
-import android.hardware.usb.UsbManager;
 import android.net.wifi.WifiManager;
 import android.os.AsyncTask;
 import android.os.BatteryManager;
@@ -67,9 +64,7 @@ import android.text.TextUtils;
 import android.util.Log;
 import android.view.HardwareRenderer;
 import android.view.IWindowManager;
-import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityManager;
 import android.widget.Switch;
 import android.widget.TextView;
@@ -156,7 +151,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
     private static final String WIFI_VERBOSE_LOGGING_KEY = "wifi_verbose_logging";
     private static final String WIFI_AGGRESSIVE_HANDOVER_KEY = "wifi_aggressive_handover";
     private static final String WIFI_ALLOW_SCAN_WITH_TRAFFIC_KEY = "wifi_allow_scan_with_traffic";
-    private static final String USB_CONFIGURATION_KEY = "select_usb_configuration";
     private static final String WIFI_LEGACY_DHCP_CLIENT_KEY = "legacy_dhcp_client";
     private static final String MOBILE_DATA_ALWAYS_ON = "mobile_data_always_on";
     private static final String KEY_COLOR_MODE = "color_mode";
@@ -238,7 +232,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
     private SwitchPreference mForceRtlLayout;
     private ListPreference mDebugHwOverdraw;
     private ListPreference mLogdSize;
-    private ListPreference mUsbConfiguration;
     private ListPreference mTrackFrameTime;
     private ListPreference mShowNonRectClip;
     private ListPreference mWindowAnimationScale;
@@ -381,7 +374,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         mLegacyDhcpClient = findAndInitSwitchPref(WIFI_LEGACY_DHCP_CLIENT_KEY);
         mMobileDataAlwaysOn = findAndInitSwitchPref(MOBILE_DATA_ALWAYS_ON);
         mLogdSize = addListPreference(SELECT_LOGD_SIZE_KEY);
-        mUsbConfiguration = addListPreference(USB_CONFIGURATION_KEY);
 
         mWindowAnimationScale = addListPreference(WINDOW_ANIMATION_SCALE_KEY);
         mTransitionAnimationScale = addListPreference(TRANSITION_ANIMATION_SCALE_KEY);
@@ -545,15 +537,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
     }
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-            Bundle savedInstanceState) {
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(UsbManager.ACTION_USB_STATE);
-        getActivity().registerReceiver(mUsbReceiver, filter);
-        return super.onCreateView(inflater, container, savedInstanceState);
-    }
-
-    @Override
     public void onDestroyView() {
         super.onDestroyView();
 
@@ -562,7 +545,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         }
         mSwitchBar.removeOnSwitchChangeListener(this);
         mSwitchBar.hide();
-        getActivity().unregisterReceiver(mUsbReceiver);
     }
 
     void updateSwitchPreference(SwitchPreference switchPreference, boolean value) {
@@ -1311,36 +1293,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         updateLogdSizeValues();
     }
 
-    private void updateUsbConfigurationValues() {
-        if (mUsbConfiguration != null) {
-            UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
-
-            String[] values = getResources().getStringArray(R.array.usb_configuration_values);
-            String[] titles = getResources().getStringArray(R.array.usb_configuration_titles);
-            int index = 0;
-            for (int i = 0; i < titles.length; i++) {
-                if (manager.isFunctionEnabled(values[i])) {
-                    index = i;
-                    break;
-                }
-            }
-            mUsbConfiguration.setValue(values[index]);
-            mUsbConfiguration.setSummary(titles[index]);
-            mUsbConfiguration.setOnPreferenceChangeListener(this);
-        }
-    }
-
-    private void writeUsbConfigurationOption(Object newValue) {
-        UsbManager manager = (UsbManager)getActivity().getSystemService(Context.USB_SERVICE);
-        String function = newValue.toString();
-        manager.setCurrentFunction(function);
-        if (function.equals("none")) {
-            manager.setUsbDataUnlocked(false);
-        } else {
-            manager.setUsbDataUnlocked(true);
-        }
-    }
-
     private void updateCpuUsageOptions() {
         updateSwitchPreference(mShowCpuUsage,
                 Settings.Global.getInt(getActivity().getContentResolver(),
@@ -1739,9 +1691,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         } else if (preference == mLogdSize) {
             writeLogdSizeOption(newValue);
             return true;
-        } else if (preference == mUsbConfiguration) {
-            writeUsbConfigurationOption(newValue);
-            return true;
         } else if (preference == mWindowAnimationScale) {
             writeAnimationScaleOption(0, mWindowAnimationScale, newValue);
             return true;
@@ -1864,13 +1813,6 @@ public class DevelopmentSettings extends SettingsPreferenceFragment
         }
     }
 
-    private BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            updateUsbConfigurationValues();
-        }
-    };
-
     static class SystemPropPoker extends AsyncTask<Void, Void, Void> {
         @Override
         protected Void doInBackground(Void... params) {
diff --git a/src/com/android/settings/Settings.java b/src/com/android/settings/Settings.java
index a577f9f..a6e6287 100644
--- a/src/com/android/settings/Settings.java
+++ b/src/com/android/settings/Settings.java
@@ -84,6 +84,7 @@ public class Settings extends SettingsActivity {
     public static class DeviceAdminSettingsActivity extends SettingsActivity { /* empty */ }
     public static class DataUsageSummaryActivity extends SettingsActivity { /* empty */ }
     public static class AdvancedWifiSettingsActivity extends SettingsActivity { /* empty */ }
+    public static class AdvancedStorageSettingsActivity extends SettingsActivity { /* empty */ }
     public static class SavedAccessPointsSettingsActivity extends SettingsActivity { /* empty */ }
     public static class TextToSpeechSettingsActivity extends SettingsActivity { /* empty */ }
     public static class AndroidBeamSettingsActivity extends SettingsActivity { /* empty */ }
diff --git a/src/com/android/settings/SettingsActivity.java b/src/com/android/settings/SettingsActivity.java
index 1b04982..5cfbbe4 100644
--- a/src/com/android/settings/SettingsActivity.java
+++ b/src/com/android/settings/SettingsActivity.java
@@ -128,6 +128,7 @@ import com.android.settings.vpn2.VpnSettings;
 import com.android.settings.wfd.WifiDisplaySettings;
 import com.android.settings.widget.SwitchBar;
 import com.android.settings.wifi.AdvancedWifiSettings;
+import com.android.settings.deviceinfo.AdvancedStorageSettings;
 import com.android.settings.wifi.SavedAccessPointsWifiSettings;
 import com.android.settings.wifi.WifiSettings;
 import com.android.settings.wifi.p2p.WifiP2pSettings;
@@ -296,6 +297,7 @@ public class SettingsActivity extends Activity
             WirelessSettings.class.getName(),
             WifiSettings.class.getName(),
             AdvancedWifiSettings.class.getName(),
+            AdvancedStorageSettings.class.getName(),
             SavedAccessPointsWifiSettings.class.getName(),
             BluetoothSettings.class.getName(),
             SimSettings.class.getName(),
diff --git a/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java b/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java
new file mode 100644
index 0000000..d9bfd0d
--- /dev/null
+++ b/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java
@@ -0,0 +1,135 @@
+/*
+ *  Copyright (C) 2016 Krexus
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+package com.android.settings.deviceinfo;
+
+import android.app.Activity;
+import android.app.KeyguardManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.usb.UsbManager;
+import android.os.Bundle;
+import android.os.SystemProperties;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.PreferenceScreen;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.android.internal.logging.MetricsLogger;
+
+import com.dirtyunicorns.dutweaks.preference.SystemSettingSwitchPreference;
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class AdvancedStorageSettings extends SettingsPreferenceFragment
+        implements OnPreferenceChangeListener {
+
+    private static final String USB_DATA_AUTO_UNLOCK_KEY = "usb_data_auto_unlock";
+    private static final String USB_CONFIGURATION_KEY = "select_usb_configuration";
+
+    private SystemSettingSwitchPreference mUsbDataAutoUnlock;
+    private ListPreference mUsbConfiguration;
+    private KeyguardManager mKeyguardManager;
+
+    @Override
+    protected int getMetricsCategory() {
+        return MetricsLogger.DEVICEINFO_STORAGE;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        addPreferencesFromResource(R.xml.storage_advanced_settings);
+
+        mUsbDataAutoUnlock = (SystemSettingSwitchPreference) findPreference(USB_DATA_AUTO_UNLOCK_KEY);
+        mUsbConfiguration = (ListPreference) findPreference(USB_CONFIGURATION_KEY);
+        mKeyguardManager = (KeyguardManager) getSystemService(Context.KEYGUARD_SERVICE);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+            Bundle savedInstanceState) {
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(UsbManager.ACTION_USB_STATE);
+        boolean keyguardSecure = mKeyguardManager.isKeyguardSecure();
+        mUsbDataAutoUnlock.setEnabled(!keyguardSecure);
+        if (keyguardSecure) {
+            mUsbDataAutoUnlock.setChecked(false);
+        }
+        getActivity().registerReceiver(mUsbReceiver, filter);
+        return super.onCreateView(inflater, container, savedInstanceState);
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        getActivity().unregisterReceiver(mUsbReceiver);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (preference == mUsbConfiguration) {
+            writeUsbConfigurationOption(newValue);
+            return true;
+        }
+        return false;
+    }
+
+    private void updateUsbConfigurationValues() {
+        if (mUsbConfiguration != null) {
+            UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
+
+            String[] values = getResources().getStringArray(R.array.usb_configuration_values);
+            String[] titles = getResources().getStringArray(R.array.usb_configuration_titles);
+            int index = 0;
+            for (int i = 0; i < titles.length; i++) {
+                if (manager.isFunctionEnabled(values[i])) {
+                    index = i;
+                    break;
+                }
+            }
+            mUsbConfiguration.setValue(values[index]);
+            mUsbConfiguration.setSummary(titles[index]);
+            mUsbConfiguration.setOnPreferenceChangeListener(this);
+        }
+    }
+
+    private void writeUsbConfigurationOption(Object newValue) {
+        UsbManager manager = (UsbManager)getActivity().getSystemService(Context.USB_SERVICE);
+        String function = newValue.toString();
+        if (function.equals("none")) {
+            manager.setCurrentFunction(null);
+            manager.setUsbDataUnlocked(false);
+        } else {
+            manager.setCurrentFunction(function);
+            manager.setUsbDataUnlocked(true);
+        }
+    }
+
+    private BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            updateUsbConfigurationValues();
+       }
+    };
+}
diff --git a/src/com/android/settings/deviceinfo/PrivateVolumeSettings.java b/src/com/android/settings/deviceinfo/PrivateVolumeSettings.java
index 3cc72f0..2f30920 100644
--- a/src/com/android/settings/deviceinfo/PrivateVolumeSettings.java
+++ b/src/com/android/settings/deviceinfo/PrivateVolumeSettings.java
@@ -57,6 +57,7 @@ import android.widget.EditText;
 import android.widget.Toast;
 
 import com.android.internal.logging.MetricsLogger;
+import com.android.settings.SettingsActivity;
 import com.android.settings.R;
 import com.android.settings.Settings.StorageUseActivity;
 import com.android.settings.SettingsPreferenceFragment;
@@ -87,6 +88,7 @@ public class PrivateVolumeSettings extends SettingsPreferenceFragment {
     private static final String TAG_CONFIRM_CLEAR_CACHE = "confirmClearCache";
 
     private static final String AUTHORITY_MEDIA = "com.android.providers.media.documents";
+    public static final int MENU_ADVANCED = Menu.FIRST;
 
     private static final int[] ITEMS_NO_SHOW_SHARED = new int[] {
             R.string.storage_detail_android_system,
@@ -342,8 +344,9 @@ public class PrivateVolumeSettings extends SettingsPreferenceFragment {
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        super.onCreateOptionsMenu(menu, inflater);
+        menu.add(Menu.NONE, MENU_ADVANCED, Menu.NONE, R.string.storage_menu_advanced);
         inflater.inflate(R.menu.storage_volume, menu);
+        super.onCreateOptionsMenu(menu, inflater);
     }
 
     @Override
@@ -383,8 +386,14 @@ public class PrivateVolumeSettings extends SettingsPreferenceFragment {
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         final Context context = getActivity();
+        final SettingsActivity activity = (SettingsActivity) getActivity();
         final Bundle args = new Bundle();
         switch (item.getItemId()) {
+            case MENU_ADVANCED:
+                activity.startPreferencePanel(
+                            AdvancedStorageSettings.class.getName(), null,
+                            R.string.storage_advanced_titlebar, null, null, 0);
+                return true;
             case R.id.storage_rename:
                 RenameFragment.show(this, mVolume);
                 return true;
-- 
1.9.1

