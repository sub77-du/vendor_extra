From b509fe64675abf1d4473bf356c5ae60793ef1403 Mon Sep 17 00:00:00 2001
From: sub77 <sub77@ymail.com>
Date: Sun, 12 Jun 2016 11:04:37 -0500
Subject: [PATCH 1/4] TeleService: Do not create a PhoneAccount for the slot
 without SIM card

When the slot has no SIM card, the dummy subId now is no longer
negative number, so the TelecomAccountRegistry will create a PhoneAccount
for the slot without SIM card too.
Check whether the slot has SIM card and it is provisoned. if yes, add a
PhoneAccount for the slot with SIM card.

Change-Id: I19934f735ab0d77a9f464ebb90d11574c8c16955
CRs-Fixed: 820101
---
 .../services/telephony/TelecomAccountRegistry.java | 38 ++++++++++++++++++++--
 1 file changed, 35 insertions(+), 3 deletions(-)

diff --git a/src/com/android/services/telephony/TelecomAccountRegistry.java b/src/com/android/services/telephony/TelecomAccountRegistry.java
index 0137e81..5dc6dcd 100644
--- a/src/com/android/services/telephony/TelecomAccountRegistry.java
+++ b/src/com/android/services/telephony/TelecomAccountRegistry.java
@@ -27,6 +27,8 @@ import android.graphics.drawable.Drawable;
 import android.graphics.drawable.Icon;
 import android.net.Uri;
 import android.os.PersistableBundle;
+import android.os.ServiceManager;
+import android.os.RemoteException;
 import android.telecom.PhoneAccount;
 import android.telecom.PhoneAccountHandle;
 import android.telecom.TelecomManager;
@@ -39,6 +41,7 @@ import android.telephony.SubscriptionManager.OnSubscriptionsChangedListener;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 
+import com.android.internal.telephony.IExtTelephony;
 import com.android.internal.telephony.Phone;
 import com.android.internal.telephony.PhoneFactory;
 import com.android.internal.telephony.PhoneProxy;
@@ -452,14 +455,43 @@ final class TelecomAccountRegistry {
         Phone[] phones = PhoneFactory.getPhones();
         Log.d(this, "Found %d phones.  Attempting to register.", phones.length);
 
+        // states we are interested in from what
+        // IExtTelephony.getCurrentUiccCardProvisioningStatus()can return
+        final int PROVISIONED = 1;
+        final int INVALID_STATE = -1;
+
+        IExtTelephony mExtTelephony =
+            IExtTelephony.Stub.asInterface(ServiceManager.getService("extphone"));
+
         final boolean phoneAccountsEnabled = mContext.getResources().getBoolean(
                 R.bool.config_pstn_phone_accounts_enabled);
 
         if (phoneAccountsEnabled) {
             for (Phone phone : phones) {
-                int subscriptionId = phone.getSubId();
-                Log.d(this, "Phone with subscription id %d", subscriptionId);
-                if (subscriptionId >= 0) {
+            int provisionStatus = INVALID_STATE;
+            int subscriptionId = phone.getSubId();
+            SubscriptionInfo record =
+                    mSubscriptionManager.getActiveSubscriptionInfo(subscriptionId);
+
+            if (record == null) {
+                Log.d(this, "Record not created for dummy subscription id %d", subscriptionId);
+                continue;
+            }
+
+            int slotId = record.getSimSlotIndex();
+
+            try {
+                //get current provision state of the SIM.
+               provisionStatus =
+                        mExtTelephony.getCurrentUiccCardProvisioningStatus(slotId);
+            } catch (RemoteException ex) {
+                Log.w(this, "Failed to get status for, slotId: "+ slotId +" Exception: " + ex);
+            } catch (NullPointerException ex) {
+                Log.w(this, "Failed to get status for, slotId: "+ slotId +" Exception: " + ex);
+            }
+            Log.d(this, "Phone with subscription id: " + subscriptionId +
+                            " slotId: " + slotId + " provisionStatus: " + provisionStatus);
+            if ((subscriptionId >= 0) && (provisionStatus == PROVISIONED)){
                     mAccounts.add(new AccountEntry(phone, false /* emergency */,
                             false /* isDummy */));
                 }
-- 
1.9.1

