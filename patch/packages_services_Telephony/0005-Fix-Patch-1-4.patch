From f2b77ac52a404cd706b63fe917789335ac531e69 Mon Sep 17 00:00:00 2001
From: sub77 <sub77@ymail.com>
Date: Sun, 12 Jun 2016 15:23:12 -0500
Subject: [PATCH] Fix Patch 1-4

Change-Id: Ia5ae7c3962c6bee8882518dbe2927e9c24aff7af
---
 .../services/telephony/TelecomAccountRegistry.java | 92 +++++++++++-----------
 1 file changed, 47 insertions(+), 45 deletions(-)

diff --git a/src/com/android/services/telephony/TelecomAccountRegistry.java b/src/com/android/services/telephony/TelecomAccountRegistry.java
index 400e414..77a0d94 100644
--- a/src/com/android/services/telephony/TelecomAccountRegistry.java
+++ b/src/com/android/services/telephony/TelecomAccountRegistry.java
@@ -455,66 +455,68 @@ final class TelecomAccountRegistry {
         Phone[] phones = PhoneFactory.getPhones();
         Log.d(this, "Found %d phones.  Attempting to register.", phones.length);
 
-        // states we are interested in from what
-        // IExtTelephony.getCurrentUiccCardProvisioningStatus()can return
-        final int PROVISIONED = 1;
-        final int INVALID_STATE = -1;
-
-        IExtTelephony mExtTelephony =
-            IExtTelephony.Stub.asInterface(ServiceManager.getService("extphone"));
-
         final boolean phoneAccountsEnabled = mContext.getResources().getBoolean(
                 R.bool.config_pstn_phone_accounts_enabled);
         int primaryStackId = 0;
-        IExtTelephony mExtTelephony =
-            IExtTelephony.Stub.asInterface(ServiceManager.getService("extphone"));
-
         if (phoneAccountsEnabled) {
-            for (Phone phone : phones) {
-            int provisionStatus = PROVISIONED;
-            int subscriptionId = phone.getSubId();
-            
-            if (mTelephonyManager.getPhoneCount() > 1) {
-                SubscriptionInfo record =
-                        mSubscriptionManager.getActiveSubscriptionInfo(subscriptionId);
-
-                if (record == null) {
-                    Log.d(this, "Record not created for dummy subscription id %d", subscriptionId);
-                    continue;
-                }
+            // states we are interested in from what
+            // IExtTelephony.getCurrentUiccCardProvisioningStatus()can return
+            final int PROVISIONED = 1;
+            final int INVALID_STATE = -1;
 
-                int slotId = record.getSimSlotIndex();
-
-                try {
-                    //get current provision state of the SIM.
-                    provisionStatus =
-                            mExtTelephony.getCurrentUiccCardProvisioningStatus(slotId);
-                } catch (RemoteException ex) {
-                    provisionStatus = INVALID_STATE;
-                    Log.w(this, "Failed to get status for, slotId: "+ slotId +" Exception: " + ex);
-                } catch (NullPointerException ex) {
-                    provisionStatus = INVALID_STATE;
-                    Log.w(this, "Failed to get status for, slotId: "+ slotId +" Exception: " + ex);
-                }
+            IExtTelephony mExtTelephony =
+                    IExtTelephony.Stub.asInterface(ServiceManager.getService("extphone"));
 
-                if (provisionStatus == INVALID_STATE) {
-                    provisionStatus = PROVISIONED;
+            for (Phone phone : phones) {
+                int provisionStatus = PROVISIONED;
+                int subscriptionId = phone.getSubId();
+
+                if (mTelephonyManager.getPhoneCount() > 1) {
+                    SubscriptionInfo record =
+                            mSubscriptionManager.getActiveSubscriptionInfo(subscriptionId);
+
+                    if (record == null) {
+                        Log.d(this, "Record not created for dummy subscription id %d", subscriptionId);
+                        continue;
+                    }
+
+                    int slotId = record.getSimSlotIndex();
+
+                    try {
+                        //get current provision state of the SIM.
+                        provisionStatus =
+                                mExtTelephony.getCurrentUiccCardProvisioningStatus(slotId);
+                    } catch (RemoteException ex) {
+                        provisionStatus = INVALID_STATE;
+                        Log.w(this, "Failed to get status for, slotId: "+ slotId +" Exception: " + ex);
+                    } catch (NullPointerException ex) {
+                        provisionStatus = INVALID_STATE;
+                        Log.w(this, "Failed to get status for, slotId: "+ slotId +" Exception: " + ex);
+                    }
+
+                    if (provisionStatus == INVALID_STATE) {
+                        provisionStatus = PROVISIONED;
+                    }
+
+                    Log.d(this, "Phone with subscription id: " + subscriptionId +
+                                    " slotId: " + slotId + " provisionStatus: " + provisionStatus);
                 }
 
-                Log.d(this, "Phone with subscription id: " + subscriptionId +
-                                " slotId: " + slotId + " provisionStatus: " + provisionStatus);
-            }
-
-            if ((subscriptionId >= 0) && (provisionStatus == PROVISIONED)){
+                if ((subscriptionId >= 0) && (provisionStatus == PROVISIONED)){
                     mAccounts.add(new AccountEntry(phone, false /* emergency */, false /* isDummy */));
                 }
-        }
-        try {
+            }
+
+            try {
                 //get primary stack phone id.
                 primaryStackId = mExtTelephony.getPrimaryStackPhoneId();
             } catch (RemoteException ex) {
                 Log.w(this, "Failed to get primary stack id");
+            } catch (NullPointerException ex) {
+                Log.w(this, "Failed to get primary stack id");
             }
+        }
+
         // If we did not list ANY accounts, we need to provide a "default" SIM account
         // for emergency numbers since no actual SIM is needed for dialing emergency
         // numbers but a phone account is.
-- 
1.9.1

